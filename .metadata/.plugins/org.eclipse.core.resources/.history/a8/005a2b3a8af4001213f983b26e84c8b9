package com.example.dif;

import android.content.Context;
import android.graphics.Point;
import android.media.AudioManager;
import android.media.SoundPool;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;

import java.util.HashMap;
import java.util.Stack;
import java.util.Timer;
import java.util.TimerTask;

public class HandlerView extends View {

    private String[] CONSTANT_BG = { "bg_1", "bg_2", "bg_space" };
    private int[] BG_SEQUENCE = { 0, 2, 1, 2, 1, 2, 1, 2 };
    private int bgCodeIdx = 0;

    private int[] CONST_C_CODE = { 0, 4, 7, 12, 16, 19, 24, 28, 31, 36 };
    private int[] CONST_CM_CODE = { 0, 3, 7, 12, 15, 19, 24, 27, 31, 36 };
    private int[] CONST_D_CODE = { 2, 6, 9, 14, 18, 21, 26, 30, 33 };
    private int[] CONST_DM_CODE = { 2, 5, 9, 14, 17, 21, 26, 29, 33 };
    private int[] CONST_F_CODE = { 0, 5, 9, 12, 17, 21, 24, 29, 33, 36 };
    private int[] CONST_FM_CODE = {0, 5, 8, 12, 17 }; 
    private int[] CONST_G_CODE = { 2, 7, 11, 14, 19, 23, 26, 31, 35 };
    private int[] CONST_GM_CODE = { 2, 7, 10, 14, 19, 22, 26, 31, 34 };
    private int[] CONST_A_CODE = {1, 4, 9, 13, 16, 21, 25, 28, 33 };
    private int[] CONST_AM_CODE = { 0, 4, 9, 12, 16, 21, 24, 28, 33, 36 };
    private int[] CONST_B_CODE = { 3, 6, 11, 15, 18, 23, 27, 30, 35 };
    private int[] CONST_BM_CODE = { 2, 6, 11, 14, 18, 23, 26, 30, 35 };

    private int[][] CODE_ARRAY = { CONST_C_CODE, CONST_AM_CODE, CONST_F_CODE, CONST_G_CODE };

    private int nowCodeListIdx = 0;

    private int[] nowCode;
    private int nowCodeIdx = 0;

    private final String[] CONSTANT_MELODY = {
            "c_1", "c_1s", "d_1", "d_1s", "e_1", "f_1", "f_1s", "g_1", "g_1s", "a_1", "a_1s", "b_1", // 0~11
            "c_2", "c_2s", "d_2", "d_2s", "e_2", "f_2", "f_2s", "g_2", "g_2s", "a_2", "a_2s", "b_2", // 12~23
            "c_3", "c_3s", "d_3", "d_3s", "e_3", "f_3", "f_3s", "g_3", "g_3s", "a_3", "a_3s", "b_3", // 24~35
            "c_4" };                                                                                 // 36

    private HashMap<String, Integer> SoundTable;
    private SoundPool sPool;

    private boolean isTouching = false;

    private Stack<Point> pointStack;

    private long a = 0, b = 0;

    public HandlerView(Context context) {
        super(context);

        SoundTable = new HashMap<String, Integer>();
        SoundTable.get(CONSTANT_MELODY[0]);

        sPool = new SoundPool(256, AudioManager.STREAM_MUSIC, 0);

        pointStack = new Stack<Point>();

        for(int i=0; i<CONSTANT_MELODY.length; i++) {
            SoundTable.put(CONSTANT_MELODY[i], sPool.load(context, getResources().getIdentifier(CONSTANT_MELODY[i], "raw", "com.example.dif"), 0));
        }

        for(int i=0; i<CONSTANT_BG.length; i++) {
            SoundTable.put(CONSTANT_BG[i], sPool.load(context, getResources().getIdentifier(CONSTANT_BG[i], "raw", "com.example.dif"), 0));
        }


        Timer timer = new Timer();
        TimerTask timerTask = new TimerTask() {
            @Override
            public void run() {

                a = System.currentTimeMillis();

                Log.i("DRUZIC", "Secs : " + (a - b));

                long c = a - b;

                if(c < 250) {
                    try {
                        Thread.sleep(250 - c);
                    } catch (InterruptedException e) {
                        e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                    }
                }

                if((bgCodeIdx != 0) &&
                        (bgCodeIdx % BG_SEQUENCE.length == 0)) {
                    //nowCode = CODE_ARRAY[nowCodeListIdx%CODE_ARRAY.length];
                    nowCodeListIdx++;
                }

                nowCode = CODE_ARRAY[nowCodeListIdx%CODE_ARRAY.length];

                sPool.play(SoundTable.get(CONSTANT_BG[BG_SEQUENCE[bgCodeIdx%BG_SEQUENCE.length]]), 1, 1, 0, 0, 1);

                if(isTouching == true) {

                    if(isUp(pointStack)) {
                        if(nowCodeIdx < (nowCode.length - 1)) {
                            nowCodeIdx++;
                        }
                    }
                    else {
                        if(nowCodeIdx > 0) {
                            nowCodeIdx--;
                        }
                    }

                    sPool.play(SoundTable.get(CONSTANT_MELODY[nowCode[nowCodeIdx%nowCode.length]]), 1, 1, 0, 0, 1);

                }

                bgCodeIdx++;
                //nowCodeIdx++;

                b = System.currentTimeMillis();
            }
        };

        timer.schedule(timerTask, 250, 250);
        b = System.currentTimeMillis();

    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {

        pointStack.push(new Point((int)event.getX(), (int)event.getY()));

        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                isTouching = true;

                Point outSize = new Point();
                WindowManager wMgr = (WindowManager)this.getContext().getSystemService(Context.WINDOW_SERVICE);
                wMgr.getDefaultDisplay().getSize(outSize);

                for(int i=0; i<nowCode.length; i++) {
                    if((outSize.y/nowCode.length * i <= event.getY()) &&
                            (outSize.y/nowCode.length * (i+1) > event.getY())) {
                        nowCodeIdx = nowCode.length - (i+1);
                    }
                    Log.i("DRUZIC", "now code : " + nowCode[i]);
                }

                return true;
            case MotionEvent.ACTION_MOVE:

                if(bgCodeIdx%BG_SEQUENCE.length == 0) {

                    outSize = new Point();
                    wMgr = (WindowManager) this.getContext().getSystemService(Context.WINDOW_SERVICE);
                    wMgr.getDefaultDisplay().getSize(outSize);

                    for(int i=0; i<nowCode.length; i++) {
                        if((outSize.y/nowCode.length * i <= event.getY()) &&
                                (outSize.y/nowCode.length * (i+1) > event.getY())) {
                            nowCodeIdx = nowCode.length - (i+1);
                        }
                    }
                }

                break;
            case MotionEvent.ACTION_UP:

                isTouching = false;
                break;
            default:
                return false;
        }

        // Schedules a repaint.
        invalidate();
        return true;
    }

    public boolean isUp(Stack<Point> pointStack) {
        Point n = pointStack.pop();
        Point p = pointStack.pop();

        if(n.y < p.y)
            return true;

        return false;
    }
}
